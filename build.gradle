plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.sonarqube' version "6.2.0.5505"
}

sonar {
    properties {
        property "sonar.projectKey", "user-service"
        property "sonar.qualitygate.wait", true
    }
}


group = 'edu.goorm'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.1")
}

dependencies {
    // 기본 Spring Boot WebFlux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Spring Cloud Gateway
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway:4.2.3'

    // JWT 토큰 파싱용 (Spring Cloud Gateway는 Security 필터를 안 쓰니까 별도로 파싱해야 해)
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Spring Boot Devtools (개발 편의성용)
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Spring Boot Actuator (나중에 모니터링용)
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = 'gateway.jar' // 생성될 jar 파일 이름
}